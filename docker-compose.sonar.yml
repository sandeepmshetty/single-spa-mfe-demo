services:
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    ports:
      - "9001:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - sonarnet
    depends_on:
      - sonarqube-db
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  sonarqube-db:
    image: postgres:15-alpine
    container_name: sonarqube-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - sonarnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 10s
      timeout: 5s
      retries: 5

  sonar-scanner:
    image: sonarsource/sonar-scanner-cli:latest
    container_name: sonar-scanner
    depends_on:
      sonarqube:
        condition: service_healthy
    environment:
      - SONAR_HOST_URL=http://sonarqube:9000
    volumes:
      - .:/usr/src
    networks:
      - sonarnet
    command: tail -f /dev/null

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql_data:

networks:
  sonarnet:
    driver: bridge
